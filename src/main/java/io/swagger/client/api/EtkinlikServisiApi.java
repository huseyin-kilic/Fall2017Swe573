/*
 * Etkinlik.io API
 * Tüm etkinlikleri toplamayı, kategorize etmeyi ve ilgili kişilere duyurmayı amaç edinmiş bir projedir. Bu API dokümantasyonu ile bir çok kaynaktan ve organizatörden beslenerek bir araya getirdiğimiz etkinlik içeriğine entegre olarak uygulamalar geliştirebilirsiniz. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BulunamadiHatasi;
import io.swagger.client.model.Etkinlik;
import io.swagger.client.model.GenelHata;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.SilindiHatasi;
import io.swagger.client.model.YetkilendirmeHatasi;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EtkinlikServisiApi {
    private ApiClient apiClient;

    public EtkinlikServisiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EtkinlikServisiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for etkinlikIdGet
     * @param id Etkinlik id bilgisi. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call etkinlikIdGetCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/etkinlik/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call etkinlikIdGetValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling etkinlikIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = etkinlikIdGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Etkinlik Detay
     * 
     * @param id Etkinlik id bilgisi. (required)
     * @return Etkinlik
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Etkinlik etkinlikIdGet(Integer id) throws ApiException {
        ApiResponse<Etkinlik> resp = etkinlikIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Etkinlik Detay
     * 
     * @param id Etkinlik id bilgisi. (required)
     * @return ApiResponse&lt;Etkinlik&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Etkinlik> etkinlikIdGetWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = etkinlikIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Etkinlik>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Etkinlik Detay (asynchronously)
     * 
     * @param id Etkinlik id bilgisi. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call etkinlikIdGetAsync(Integer id, final ApiCallback<Etkinlik> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = etkinlikIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Etkinlik>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for etkinliklerGet
     * @param turIds Etkinlikleri türlere göre filtrelemek için. Birden fazla tür için , kullanabilirsiniz. (optional)
     * @param kategoriIds Etkinlikleri kategorilere göre filtrelemek için. Birden fazla kategori için , kullanabilirsiniz. (optional)
     * @param mekanIds Etkinlikleri mekana göre filtrelemek için. Birden fazla mekan için , kullanabilirsiniz. (optional)
     * @param sehirIds Etkinlikleri şehre göre filtrelemek için. Birden fazla şehir için , kullanabilirsiniz. (optional)
     * @param sayfa Sonuçları sayfa bilgisine göre listelemek için. (optional, default to 1)
     * @param adet Kaç adet sonuç geleceğini belirtmek için. (optional, default to 50)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call etkinliklerGetCall(String turIds, String kategoriIds, String mekanIds, String sehirIds, Integer sayfa, Integer adet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/etkinlikler";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (turIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "turIds", turIds));
        if (kategoriIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "kategoriIds", kategoriIds));
        if (mekanIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mekanIds", mekanIds));
        if (sehirIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sehirIds", sehirIds));
        if (sayfa != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sayfa", sayfa));
        if (adet != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "adet", adet));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call etkinliklerGetValidateBeforeCall(String turIds, String kategoriIds, String mekanIds, String sehirIds, Integer sayfa, Integer adet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = etkinliklerGetCall(turIds, kategoriIds, mekanIds, sehirIds, sayfa, adet, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Etkinlik Listesi
     * 
     * @param turIds Etkinlikleri türlere göre filtrelemek için. Birden fazla tür için , kullanabilirsiniz. (optional)
     * @param kategoriIds Etkinlikleri kategorilere göre filtrelemek için. Birden fazla kategori için , kullanabilirsiniz. (optional)
     * @param mekanIds Etkinlikleri mekana göre filtrelemek için. Birden fazla mekan için , kullanabilirsiniz. (optional)
     * @param sehirIds Etkinlikleri şehre göre filtrelemek için. Birden fazla şehir için , kullanabilirsiniz. (optional)
     * @param sayfa Sonuçları sayfa bilgisine göre listelemek için. (optional, default to 1)
     * @param adet Kaç adet sonuç geleceğini belirtmek için. (optional, default to 50)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 etkinliklerGet(String turIds, String kategoriIds, String mekanIds, String sehirIds, Integer sayfa, Integer adet) throws ApiException {
        ApiResponse<InlineResponse200> resp = etkinliklerGetWithHttpInfo(turIds, kategoriIds, mekanIds, sehirIds, sayfa, adet);
        return resp.getData();
    }

    /**
     * Etkinlik Listesi
     * 
     * @param turIds Etkinlikleri türlere göre filtrelemek için. Birden fazla tür için , kullanabilirsiniz. (optional)
     * @param kategoriIds Etkinlikleri kategorilere göre filtrelemek için. Birden fazla kategori için , kullanabilirsiniz. (optional)
     * @param mekanIds Etkinlikleri mekana göre filtrelemek için. Birden fazla mekan için , kullanabilirsiniz. (optional)
     * @param sehirIds Etkinlikleri şehre göre filtrelemek için. Birden fazla şehir için , kullanabilirsiniz. (optional)
     * @param sayfa Sonuçları sayfa bilgisine göre listelemek için. (optional, default to 1)
     * @param adet Kaç adet sonuç geleceğini belirtmek için. (optional, default to 50)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> etkinliklerGetWithHttpInfo(String turIds, String kategoriIds, String mekanIds, String sehirIds, Integer sayfa, Integer adet) throws ApiException {
        com.squareup.okhttp.Call call = etkinliklerGetValidateBeforeCall(turIds, kategoriIds, mekanIds, sehirIds, sayfa, adet, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Etkinlik Listesi (asynchronously)
     * 
     * @param turIds Etkinlikleri türlere göre filtrelemek için. Birden fazla tür için , kullanabilirsiniz. (optional)
     * @param kategoriIds Etkinlikleri kategorilere göre filtrelemek için. Birden fazla kategori için , kullanabilirsiniz. (optional)
     * @param mekanIds Etkinlikleri mekana göre filtrelemek için. Birden fazla mekan için , kullanabilirsiniz. (optional)
     * @param sehirIds Etkinlikleri şehre göre filtrelemek için. Birden fazla şehir için , kullanabilirsiniz. (optional)
     * @param sayfa Sonuçları sayfa bilgisine göre listelemek için. (optional, default to 1)
     * @param adet Kaç adet sonuç geleceğini belirtmek için. (optional, default to 50)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call etkinliklerGetAsync(String turIds, String kategoriIds, String mekanIds, String sehirIds, Integer sayfa, Integer adet, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = etkinliklerGetValidateBeforeCall(turIds, kategoriIds, mekanIds, sehirIds, sayfa, adet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
